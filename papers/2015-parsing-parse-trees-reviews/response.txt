Thank you all for taking the time to read and respond to our paper, and for your suggestions for improvement.

The biggest point of confusion seems to be on the splitter / splitting oracle.  The goal of using a splitter was to simultaneously allow room for future work on more efficient parsers, while allowing us to side-step the all of the algorithmically interesting bits in favor of a presentation on the generalizations we made (which should extend to other parsing algorithms) that allowed the parser to be reused to fit together into a proof of its own correctness.  When splitting strings, it suffices to use the brute-force splitter, which returns the list of splits of the string at all possible locations (character 0 up through the last character); we filter the list for correctness of the resulting parse, so it does no harm to include redundancy.

Regarding the accompanying Coq code, we agree that it is suboptimal.  We did not find enough time to clean up the code.  It was an explicit goal in writing the paper to hide as many of the warts of our code-base as we could: long names, long lines, costly mistakes that we didn't have time to fix, unenlightening details forced on us by Coq.
Noting specific points: [min_parse] is named [minimal_parse_nonterminal__of__parse] in our code base.
We should have done more to make the code match the paper, and intend to do so, should the paper be accepted. 

Reviewer C, on versions of increasing complexity: To a first approximation, there is the code in 1.1, the slightly more complicated code in 1.2, and the fuller code of Figure 2.  Perhaps we could have indicated diffs more clearly, or rewritten 1.1 and 1.2 when it came time to introduce Figure 2, perhaps indicating which bits were already there in 1.1, which bits where there to prevent infinite regress from 1.2, and which bits are just there to handle the more complicated type signature.  In the actual code, there is BooleanRecognizer.v, which corresponds to the grammar-independent version of the code in 1.2 (equivalently, to the code in Figure 2 specialized to Booleans), while DependentlyTyped.v gives the full code of the interface and implementation of Figures 1 and 2.

> did editors and any other tools support the development, or not?
Only ProofGeneral, the de facto standard Coq editor.

Regarding only handling finite sets of nonterminals:
Consider A := B, B := C, C := D, and so on, ad infinitum.  There is no finite set of "used" nonterminals to be extracted.  The strategy really only works for manifestly finite sets of explicitly given "used nonterminals".

Regarding which parse tree is returned:
It depends on the splitter.  It returns the first loopless parse tree that the splitter provides it.  It would be relatively easy to make it return all parse trees, roughly by replacing a "fold" with a "flat_map". 
