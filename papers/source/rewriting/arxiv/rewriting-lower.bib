% Encoding: UTF-8

@InProceedings{conf_hase_BoyleRW97,
  author    = {Boyle, James M. and Resler, R. Daniel and Winter, Victor L.},
  booktitle = {HASE},
  date      = {1997},
  title     = {Do You Trust Your Compiler? Applying Formal Methods to Constructing High-Assurance Compilers.},
  doi       = {10.1109/HASE.1997.648033},
  isbn      = {0-8186-7971-9},
  pages     = {14--31},
  publisher = {IEEE Computer Society},
  url       = {https://dblp.uni-trier.de/db/conf/hase/hase1997.html\#BoyleRW97},
  added-at  = {2017-05-25T00:00:00.000+0200},
  biburl    = {https://www.bibsonomy.org/bibtex/27b88c53802c50833c12105b1e8233f86/dblp},
  interhash = {23e291c3349e91ad4ec514768d9ef7ae},
  intrahash = {7b88c53802c50833c12105b1e8233f86},
  keywords  = {dblp},
  timestamp = {2019-10-17T12:17:26.000+0200},
  year      = {1997},
}

@InProceedings{PhoasICFP08,
  author    = {Adam Chlipala},
  booktitle = {ICFP'08: Proceedings of the 13th ACM SIGPLAN International Conference on Functional Programming},
  title     = {Parametric Higher-Order Abstract Syntax for Mechanized Semantics},
  url       = {http://adam.chlipala.net/papers/PhoasICFP08/},
  address   = {Victoria, British Columbia, Canada},
  month     = sep,
  owner     = {jgross},
  timestamp = {2019.04.15},
  year      = {2008},
}

@InProceedings{maranget2008compiling,
  author       = {Maranget, Luc},
  citet        = {Maranget},
  booktitle    = {Proceedings of the 2008 ACM SIGPLAN workshop on ML},
  title        = {Compiling Pattern Matching to Good Decision Trees},
  organization = {ACM},
  pages        = {35--46},
  url          = {http://moscova.inria.fr/~maranget/papers/ml05e-maranget.pdf},
  owner        = {jgross},
  timestamp    = {2019.04.15},
  year         = {2008},
}

@Misc{coq-pr-floats,
  author    = {Erik Martin-Dorel},
  title     = {Implementing primitive floats (binary64 floating-point numbers) - Issue \#8276 - coq/coq},
  url       = {https://github.com/coq/coq/issues/8276},
  month     = aug,
  owner     = {jgross},
  timestamp = {2019.04.22},
  year      = {2018},
}

@Misc{coq-pr-ints,
  author    = {Maxime Dénès},
  title     = {Primitive integers - Issue \#6914 - coq/coq},
  url       = {https://github.com/coq/coq/pull/6914},
  month     = mar,
  owner     = {jgross},
  timestamp = {2020.06.27},
  year      = {2018},
}

@Misc{coq-pr-arrays,
  author    = {Maxime Dénès},
  title     = {Primitive persistent arrays - Issue \#11604 - coq/coq},
  url       = {https://github.com/coq/coq/pull/11604},
  month     = feb,
  owner     = {jgross},
  timestamp = {2020.06.27},
  year      = {2020},
}

@Article{Compcert,
  author     = {Leroy, Xavier},
  title      = {A Formally Verified Compiler Back-end},
  issn       = {0168-7433},
  number     = {4},
  pages      = {363--446},
  url        = {http://gallium.inria.fr/~xleroy/publi/compcert-backend.pdf},
  volume     = {43},
  acmid      = {1666216},
  address    = {Secaucus, NJ, USA},
  issue_date = {December 2009},
  journal    = {J. Autom. Reason.},
  keywords   = {Compiler transformations and optimizations, Compiler verification, Formal methods, Program proof, Semantic preservation, The Coq theorem prover},
  month      = dec,
  numpages   = {84},
  publisher  = {Springer-Verlag New York, Inc.},
  year       = {2009},
}

@InProceedings{seL4SOSP09,
  author    = {Gerwin Klein and Kevin Elphinstone and Gernot Heiser and June Andronick and David Cock and Philip Derrin and Dhammika Elkaduwe and Kai Engelhardt and Rafal Kolanski and Michael Norrish and Thomas Sewell and Harvey Tuch and Simon Winwood},
  booktitle = {Proc. SOSP},
  title     = {{seL4}: Formal Verification of an {OS} Kernel},
  pages     = {207--220},
  publisher = {ACM},
  year      = {2009},
}

@Book{PartialEvaluation,
  author    = {N.D. Jones and C.K. Gomard and P. Sestoft},
  title     = {Partial Evaluation and Automatic Program Generation},
  isbn      = {0-13-020249-5},
  publisher = {Prentice Hall International},
  month     = jun,
  year      = {1993},
}

@Article{LMS,
  author  = {Tiark Rompf and Martin Odersky},
  title   = {Lightweight modular staging: {A} pragmatic approach to runtime code generation and compiled {DSL}s},
  url     = {https://infoscience.epfl.ch/record/150347/files/gpce63-rompf.pdf},
  journal = {Proceedings of GPCE},
  year    = {2010},
}

@InProceedings{FiatCryptoSP19,
  author    = {Andres Erbsen and Jade Philipoom and Jason Gross and Robert Sloan and Adam Chlipala},
  booktitle = {IEEE Security \& Privacy},
  title     = {Simple High-Level Code For Cryptographic Arithmetic -- With Proofs, Without Compromises},
  url       = {http://adam.chlipala.net/papers/FiatCryptoSP19/},
  address   = {San Francisco, CA, USA},
  citet     = {Erbsen et al.\@},
  month     = may,
  year      = {2019},
}

@InProceedings{ReflectionTACS97,
  author    = {Boutin, Samuel},
  booktitle = {Proc. TACS},
  title     = {Using reflection to build efficient and certified decision procedures},
  year      = {1997},
}

@InProceedings{NbE,
  author    = {U. Berger and H. Schwichtenberg},
  booktitle = {[1991] Proceedings Sixth Annual IEEE Symposium on Logic in Computer Science},
  title     = {An inverse of the evaluation functional for typed $\lambda$-calculus},
  doi       = {10.1109/LICS.1991.151645},
  pages     = {203--211},
  keywords  = {formal logic;inverse;evaluation functional;typed lambda -calculus;typed lambda -terms;normalization algorithm;lambda -calculi;constants;natural deduction proofs;completeness theorem;recursive functions;Calculus;Arithmetic;Computer languages},
  month     = jul,
  year      = {1991},
}

@InProceedings{Aehlig,
  author    = {Klaus Aehlig and Florian Haftmann and Tobias Nipkow},
  citet     = {Aehlig et al.\@},
  booktitle = {Proc. TPHOLs},
  title     = {A Compiled Implementation of Normalization by Evaluation},
  year      = {2008},
}

@InProceedings{CodeGen,
  author    = {Florian Haftmann and Tobias Nipkow},
  booktitle = {Proc. TPHOLs},
  title     = {A Code Generator Framework for {I}sabelle/{HOL}},
  year      = {2007},
}

@InProceedings{vale,
  author    = {Barry Bond and Chris Hawblitzel and Manos Kapritsos and Rustan Leino and Jay Lorch and Bryan Parno and Ashay Rane and Srinath Setty and Laure Thompson},
  booktitle = {Proc. USENIX Security},
  title     = {Vale: Verifying High-Performance Cryptographic Assembly Code},
  url       = {http://www.cs.cornell.edu/~laurejt/papers/vale-2017.pdf},
  year      = {2017},
}

@InProceedings{nativecompute,
  author    = {Mathieu Boespflug and Maxime Dénès and Benjamin Grégoire},
  booktitle = {Proc. CPP},
  title     = {Full Reduction at Full Throttle},
  year      = {2011},
}

@InProceedings{vmcompute,
  author    = {Benjamin Grégoire and Xavier Leroy},
  booktitle = {Proc. ICFP},
  title     = {A compiled implementation of strong reduction},
  year      = {2002},
}

@InProceedings{LMSVerify,
  author    = {Nada Amin and Tiark Rompf},
  booktitle = {Proc. POPL},
  title     = {{LMS-Verify}: Abstraction without Regret for Verified Systems Programming},
  year      = {2017},
}

@InProceedings{TemplateCoq,
  author    = {Abhishek Anand and Simon Boulier and Cyril Cohen and Matthieu Sozeau and Nicolas Tabareau},
  booktitle = {Proc. ITP},
  title     = {Towards Certified Meta-Programming with Typed {Template-Coq}},
  year      = {2018},
}

@InProceedings{ReificationITP18,
  author    = {Jason Gross and Andres Erbsen and Adam Chlipala},
  booktitle = {Proc. ITP},
  title     = {Reification by Parametricity: Fast Setup for Proof by Reflection, in Two Lines of {L}tac},
  url       = {http://adam.chlipala.net/papers/ReificationITP18/},
  year      = {2018},
}

@InBook{rtac,
  author    = {Malecha, Gregory and Bengtson, Jesper},
  title     = {Programming Languages and Systems: 25th {E}uropean Symposium on Programming, {ESOP} 2016, Held as Part of the {E}uropean Joint Conferences on Theory and Practice of Software, {ETAPS} 2016, {E}indhoven, The {N}etherlands, April 2--8, 2016, Proceedings},
  chapter   = {Extensible and Efficient Automation Through Reflective Tactics},
  doi       = {10.1007/978-3-662-49498-1\_21},
  editor    = {Thiemann, Peter},
  isbn      = {978-3-662-49498-1},
  pages     = {532--559},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  citet     = {Malecha and Bengtson},
  year      = {2016},
}

@Conference{denes2013prim-ints-arrays,
  author    = {Maxime Dénès},
  booktitle = {The Coq Workshop 2013},
  title     = {Towards primitive data types for {C}OQ},
  subtitle  = {63-bits integers and persistent arrays},
  url       = {https://coq.inria.fr/files/coq5_submission_2.pdf},
  month     = apr,
  year      = {2013},
}

@PhdThesis{malecha2015thesis,
  author = {Gregory Michael Malecha},
  title  = {Extensible Proof Engineering in Intensional Type Theory},
  url    = {http://gmalecha.github.io/publication/2015/02/01/extensible-proof-engineering-in-intensional-type-theory.html},
  month  = nov,
  school = {Harvard University},
  year   = {2014},
}

@InProceedings{debruijn1972,
  author       = {de Bruijn, Nicolaas Govert},
  booktitle    = {Indagationes Mathematicae (Proceedings)},
  title        = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the {C}hurch-{R}osser theorem},
  number       = {5},
  organization = {Elsevier},
  pages        = {381--392},
  volume       = {75},
  year         = {1972},
}

@InProceedings{LocallyNameless,
  author     = {Aydemir, Brian and Charguéraud, Arthur and Pierce, Benjamin C. and Pollack, Randy and Weirich, Stephanie},
  booktitle  = {Proc. POPL},
  title      = {Engineering Formal Metatheory},
  pages      = {3--15},
  url        = {https://www.cis.upenn.edu/~bcpierce/papers/binders.pdf},
  issue_date = {January 2008},
  keywords   = {binding, coq, locally nameless},
  numpages   = {13},
  year       = {2008},
}

@Article{Hickey2006,
  author   = {Hickey, Jason and Nogin, Aleksey},
  citet    = {Hickey and Nogin},
  title    = {Formal Compiler Construction in a Logical Framework},
  doi      = {10.1007/s10990-006-8746-6},
  issn     = {1573-0557},
  number   = {2},
  pages    = {197--230},
  url      = {https://nogin.org/papers/mcompiler-hosc.html},
  volume   = {19},
  abstract = {The task of designing and implementing a compiler can be a difficult and error-prone process. In this paper, we present a new approach based on the use of higher-order abstract syntax and term rewriting in a logical framework. All program transformations, from parsing to code generation, are cleanly isolated and specified as term rewrites. This has several advantages. The correctness of the compiler depends solely on a small set of rewrite rules that are written in the language of formal mathematics. In addition, the logical framework guarantees the preservation of scoping, and it automates many frequently-occurring tasks including substitution and rewriting strategies. As we show, compiler development in a logical framework can be easier than in a general-purpose language like ML, in part because of automation, and also because the framework provides extensive support for examination, validation, and debugging of the compiler transformations. The paper is organized around a case study, using the MetaPRL logical framework to compile an ML-like language to Intel x86 assembly. We also present a scoped formalization of x86 assembly in which all registers are immutable.},
  journal  = {Higher-Order and Symbolic Computation},
  refid    = {Hickey2006},
  year     = {2006},
}

@Article{danvy_rhiger_rose_2001,
  author    = {Olivier Danvy and Morten Rhiger and Kristoffer H. Rose},
  title     = {Normalization by evaluation with typed abstract syntax},
  doi       = {10.1017/S0956796801004166},
  number    = {6},
  pages     = {673--680},
  volume    = {11},
  journal   = {Journal of Functional Programming},
  publisher = {Cambridge University Press},
  year      = {2001},
}

@InProceedings{Boespflug2009,
  author      = {Mathieu Boespflug},
  booktitle   = {Workshop on Normalization by Evaluation},
  date        = {2009-08},
  title       = {Efficient normalization by evaluation},
  editor      = {Olivier Danvy},
  url         = {https://hal.inria.fr/inria-00434283},
  address     = {Los Angeles, United States},
  citet       = {Boespflug},
  hal_id      = {inria-00434283},
  hal_version = {v1},
  month       = aug,
  pdf         = {https://hal.inria.fr/inria-00434283/file/NBE09-Boespflug-fastnbe.pdf},
  year        = {2009},
}

@PhdThesis{Ringer2021,
  author = {Talia Ringer},
  title  = {Proof Repair},
  url    = {https://dependenttyp.es/pdf/thesis.pdf},
  school = {University of Washington},
  year   = {2021},
}

@InProceedings{DeMillo1977,
  author    = {DeMillo, Richard A. and Lipton, Richard J. and Perlis, Alan J.},
  booktitle = {Proceedings of the 4th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages},
  title     = {Social Processes and Proofs of Theorems and Programs},
  doi       = {10.1145/512950.512970},
  location  = {Los Angeles, California},
  pages     = {206--214},
  publisher = {ACM},
  series    = {POPL '77},
  acmid     = {512970},
  address   = {New York, NY, USA},
  keywords  = {foundations, trusted-bases},
  numpages  = {9},
  skipurl   = {http://doi.acm.org/10.1145/512950.512970},
  year      = {1977},
}

@Electronic{WorseIsBetter,
  author = {Richard P. Gabriel},
  title  = {The Rise of ``Worse is Better''},
  url    = {https://www.dreamsongs.com/RiseOfWorseIsBetter.html},
  year   = {1991},
}

@InProceedings{CakeML,
  author    = {Ramana Kumar and Magnus O. Myreen and Michael Norrish and Scott Owens},
  booktitle = {POPL '14: Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  date      = {2014-01},
  title     = {{CakeML}: A Verified Implementation of {ML}},
  pages     = {179--191},
  publisher = {ACM Press},
  url       = {https://cakeml.org/popl14.pdf},
  month     = jan,
  year      = {2014},
}

@InProceedings{xcert,
  author    = {Tatlock, Zachary and Lerner, Sorin},
  citet     = {Tatlock and Lerner},
  booktitle = {Proceedings of the 31st ACM SIGPLAN Conference on Programming Language Design and Implementation},
  date      = {2010},
  title     = {Bringing Extensibility to Verified Compilers},
  doi       = {10.1145/1806596.1806611},
  isbn      = {9781450300193},
  location  = {Toronto, Ontario, Canada},
  pages     = {111--121},
  publisher = {Association for Computing Machinery},
  series    = {PLDI '10},
  abstract  = {Verified compilers, such as Leroy's CompCert, are accompanied by a fully checked correctness proof. Both the compiler and proof are often constructed with an interactive proof assistant. This technique provides a strong, end-to-end correctness guarantee on top of a small trusted computing base. Unfortunately, these compilers are also challenging to extend since each additional transformation must be proven correct in full formal detail.At the other end of the spectrum, techniques for compiler correctness based on a domain-specific language for writing optimizations, such as Lerner's Rhodium and Cobalt, make the compiler easy to extend: the correctness of additional transformations can be checked completely automatically. Unfortunately, these systems provide a weaker guarantee since their end-to-end correctness has not been proven fully formally.We present an approach for compiler correctness that provides the best of both worlds by bridging the gap between compiler verification and compiler extensibility. In particular, we have extended Leroy's CompCert compiler with an execution engine for optimizations written in a domain specific and proved that this execution engine preserves program semantics, using the Coq proof assistant. We present our CompCert extension, XCert, including the details of its execution engine and proof of correctness in Coq. Furthermore, we report on the important lessons learned for making the proof development manageable.},
  address   = {New York, NY, USA},
  keywords  = {correctness, extensibility, compiler optimization},
  numpages  = {11},
  year      = {2010},
}

@Comment{jabref-meta: databaseType:biblatex;}
