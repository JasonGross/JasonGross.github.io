Jason,

I finished reading the Verified Partial Evaluators paper draft.  I
think it's a wonderful idea and very well written paper.

I have some questions:

1. What is meant by "module-based opacity" (BTW - typo: "pacity" in
Appendix C.3.4 around line 1444), and why that type of opacity?  I
gather this has something to do with vm_compute's aggressive unfolding,
but precisely what is not spelled out.

2. Why use cbv instead of vm_compute "to simplify away the
invocation of the denotational function on the concrete syntax tree
from rewriting."? (item (4) at the end of section 2.1).

3. It's a bit confusing as to which descriptions in the paper are about
your "original, more readable definitions" vs. the vm_compute CSP
approach.  Is the github project in that final CSP/vm_compute approach?
Is my question 2.  above related to this issue?

4. Do you have any plans to generate optimized reifiers?  In Ltac2?  At
one point you indicate that this procedure can suffer some performance
loss due to your use of a very generic reifier vs. one hand-crafted for
the particular rewrite domain - so removing that seems like a natural
"future work" possibility.

Thanks,
Jonathan
