----------------------- REVIEW 1 ---------------------
SUBMISSION: 55
TITLE: Accelerating Verified-Compiler Development with a Verified Rewriting Engine
AUTHORS: Jason Gross, Andres Erbsen, Miraya Poddar-Agrawal, Jade Philipoom and Adam Chlipala

----------- Overall evaluation -----------
SCORE: 2 (accept)
----- TEXT:
The paper presents the development and implementation of a verified (compiler) compiler from a high-level functional language to an intermediate representation suitable for translation to low-level languages. It uses rewrite rules and NbE as its main mechanics and is extensively tested against other such developments in the literature. The integration of the compiler into Fiat Cryptography significantly sped up the code generation, and thus made it possible to generate more primitives.

Strengths
+ The tool is modular, in the sense that compilers generated by the tool can be extended effortlessly. Providing new rewrite rules does not require one to change the correctness proof.
+ The tool has made it possible to use Fiat Cryptography for more primitives, which have been deployed in industry. This has had a big impact on the adoption of ITP in the industry.
+ While the main application presented is to Fiat Cryptography, the tool is general enough to be used for efficient partial evaluation of Gallina terms in other contexts.
+ Based on the micro- and macro-benchmarks, the work seems to scale much better than previous work in the same direction.
Weaknesses
- The only use-case presented is Fiat Cryptography (and a small motivating example in section 2)



----------------------- REVIEW 2 ---------------------
SUBMISSION: 55
TITLE: Accelerating Verified-Compiler Development with a Verified Rewriting Engine
AUTHORS: Jason Gross, Andres Erbsen, Miraya Poddar-Agrawal, Jade Philipoom and Adam Chlipala

----------- Overall evaluation -----------
SCORE: 3 (strong accept)
----- TEXT:
The authors present a new Coq command that is parameterized by a collection of quantified equalities (optionally) decorated with different options for controlling their application. The command generates a verified rewriter, and a reifier for using the rewriter to discharge goals in Coq. The authors implemented a reduction engine as a normal Gallina functional program, and prove its type correctness and termination, and make sure that it can be executed inside the Coq kernel. Then, they specialize the reduction engine to the set of quantified equalities provided by the user.

The authors use their new technique in the Fiat Crypo library, and report speedups of 1000x. Their approach is based on Aehlig et al. work  (for Isabelle/HOL) but has many significant differences. First and more importantly, they do not increase the size of the trusted codebase. They preserve sharing, which is vital in many applications domains. They also support efficient reduction that mixes definitional equality with user-provided equational theorems.

I found the paper very well written, and the work impressive. The paper is reporting a massive Coq development. The experimental evaluation is also compelling, and I assume many other groups will be using their code and/or ideas in the future. All the source code is available on a GitHub repository, and the code is clean and readable.



----------------------- REVIEW 3 ---------------------
SUBMISSION: 55
TITLE: Accelerating Verified-Compiler Development with a Verified Rewriting Engine
AUTHORS: Jason Gross, Andres Erbsen, Miraya Poddar-Agrawal, Jade Philipoom and Adam Chlipala

----------- Overall evaluation -----------
SCORE: 2 (accept)
----- TEXT:
Paper Summary:

This paper presents a Coq-based compiler-builder toolkit parametrized on rewrite rules. The authors develop a rewrite command in Coq that combines normally proved theorems to deliver a verified compiler, and extract the executable compiler from the output of the command. Using their compiler-builder toolkit, the authors have replaced code generator for big-integer modular arithmetic within Fiat Cryptography toolchain.


Evaluation Comments:

+ Strong Idea: of parametrizing the compiler development and verification for rewrite rules, without growing the trusted code base, with good performance of the generated compiler.

+ strong demonstrative study: fast code generation for Fiat Cryptography toolchain, replacing continuation passing style with direct style approach

Weaknesses:

My only concern about this paper is that at time authors go at great lengths to justify how their approach is different from the earlier developments for the same idea. The authors have provided the related work to the reader in the start of paper (section 1.1), that is good. However, Section 3 begins with a review of the work of Aehlig et al. This is unnecessary, and might give the reader an impression of ‘defensive solution’. I would suggest authors to completely provide the analysis of Aehlig et al’s work in the related section.
