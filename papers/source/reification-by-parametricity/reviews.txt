----------------------- REVIEW 1 ---------------------
PAPER: 1
TITLE: Reification by Parametricity
AUTHORS: Jason Gross, Andres Erbsen and Adam Chlipala

Overall evaluation: 0 (borderline paper)

----------- Overall evaluation -----------
This article presents a new reification technique for the Coq proof
assistant based on the "pattern" tactic. Reification is the process of
recovering the syntax of a Coq term, in order to be able to investigate
its structure, for instance to write a decision procedure. After
surveying existing methods, the authors present their new technique: the
interpreted types and functions are isolated using the "pattern" tactic,
then replaced with their syntactic counterpart. This tactic is able to
reify in the presence of binders, modulo βιζ-reduction, and is very
concise to implement. Finally, the authors compare with the other
methods in terms of performance, showing that their approach is one of
the most efficient one.

I find the approach very nice since it is easy to implement and showed
to be really efficient. What prevents me from giving a better mark are
the following two aspects.

1) I tested the additional material which is fine. (I did not run the
experiments though.) I came across two strong drawbacks that are not
mentioned in the paper:

- I did not find how to reify open terms. This prevents from reifying
  terms with subterms that are not part of the considered theory, which
  is an important feature for most Coq tactics using reification (e.g.
  ring).

- I did not find how to reify lambdas. For instance, I would like to
  reify "fun x => 0 * x" as "Lam (fun x => NatMul (NatO nat) (Var x))"
  (after extending the language with the standard PHOAS Lam construct).
  The method that was used to reify "let ... in ..." did not work. Is
  this a limitation or what is the right way to do it? Anyway, it should
  be detailed in the paper.

2) The paper misses the key aspect to explain *how* to use the tactics
that the author's approach produces! While the beginning of the paper
explains well the need for reification on a concise example, the authors
do not finish it by explaining how the tactic can be finally used on the
example. People that are not familiar with Ltac can then hardly take
benefit from the paper despite the fact that the method is very easy to
implement.

Would it be easy to reify in the presence of user-defined symbols
instead of predefined symbols? (For instance, suppose that the user
redefined its own notion of addition.)

Is it possible to use the new ELPI meta-language to implement
reification and if so, how does it compare to the method presented in
the paper?

Regarding the form, the paper is technical but reads smoothly, except
for inlined figures that should be separated from text (e.g. Fig.1).
Again, the major limitation is that the way to use the tactic is not
explained.

Typo:
- Sec.4: "how long does it take get a normalized reified term" ("to" is
  missing)


----------------------- REVIEW 2 ---------------------
PAPER: 1
TITLE: Reification by Parametricity
AUTHORS: Jason Gross, Andres Erbsen and Adam Chlipala

Overall evaluation: 2 (accept)

----------- Overall evaluation -----------
The paper presents a new technique for reification, in service of
proofs by reflection in Coq.  The technique works by abstracting over
the key constants in the term being reified, and then filling them in
with new constants drawn from the reflected data type.  The approach
with binding, using parametric higher-order syntax.

The paper is convincingly argued, squarely within focus for ITP, and
potentially important to researchers doing this sort of work.  I
recommend that it be accepted.

I have a couple of questions and/or suggestions for how to improve the
paper:

The technique seems strongly reminiscent of type-directed partial
evaluation.  The authors ought to look at that and draw whatever
connection can be drawn.  If the similarity is only superficial then
so be it, but there might be something deeper.

My experience with the pattern tactic (which the technique relies on
crucially) is it frequently fails on dependent types.  Did the authors
have any problems with that?

The paper spends four pages discussing other reification techniques.
It is appropriate to do this, but this is the weakest part of the
paper.  The problem is that most of the examples in this section
depend on details of Coq that are relatively obscure.  This discussion
might read better if it were pitched at a more abstract level, with
the details deferred to the appendix.  On the other hand, some of the
alternative techniques are so vague that it's hard to get anything
from them (e.g. "we can pass around an association list explicitly").
If you don't want to say more, perhaps those could be dispensed with
entirely.


Specific comments:

Bottom of the second page of section 3.2: Where it says "using the
recursor count_rec of type \Lambda T . T -> ..." I believe the \Lambda
should be a \Pi.

Footnote 7 makes an important point about how one can get into a
situation in which asymptotic performance wins.  The point oughtn't be
relegated to a footnote.


----------------------- REVIEW 3 ---------------------
PAPER: 1
TITLE: Reification by Parametricity
AUTHORS: Jason Gross, Andres Erbsen and Adam Chlipala

Overall evaluation: 1 (weak accept)

----------- Overall evaluation -----------
* Summary

This paper presents a nice overview of most of the existing
reification methods and proposes a new, simple but powerful method,
called reification by parametricity. The idea behind this new method
is very simple: generalizing a given term using the "pattern" tactic
and then specializing the generalized term into a reified term.  The
authors also conduct a large experiment to compare performance of the
different methods. The result shows that reification by parametricity
is among the most efficient ones.

* Evaluation

I really like the idea of reification by parametricity because it is
simple and easy to use but very powerful. The most interesting part is
that it has a unique, powerful ability that it can even reify terms
with an abstract parameter and then specialize the parameter to many
different values. This advantage is well demonstrated with the
recursive function "big".

Another contribution of the paper is that the whole Coq development
provides nice examples of various reification methods, which would be
really useful when one wants to learn and compare those reification
methods.

One minor problem is that the paper needs to be shortened. It is
currently 22 pages long, which should be shortened to 16 pages.  I
think it can be easily done by reducing (or moving into the appendix)
Section 2, which is just an introduction to the existing methods.

* Question

In the future work section, you discuss how to show equivalence
between terms and their reified ones without performing reduction.
However, in the example with "big", it seems that one can prove the
equivalence by induction on the counter parameter, which will require
only one step of reduction. Specifically, can you not prove the following
equivalence between a term with an abstract parameter "n" and
its reified term, by induction on "n"?

(fun x n => count_rec ...) 1 n = denote ((fun x n => count_rec ...) (S O) n)

I wonder whether this idea would work generally. If not, I also wonder
the reason.

* Details

page 19: 
  "at around 5000 rather than at around 2000" 
  ~>
  "at around 5000 rather than at around 20000" 

* Post Discussion Comment

After discussing with other PCs, I agree that it is unclear how the
technique proposed in this paper can handle open terms.  The paper
should discuss this limitation or suggest a possible solution.
Due to this, I downgraded my score from accept to weak accept.
