- The discussion of constant-time code was a little bit confusing. In the
beginning the paper states that the assembly code produced is constant time,
though a caveat is later stated that I did not fully understand-does this mean
that a different C compiler could take the C code and produce non-constant
assembly, but the compiler used here is safe?

The paper could more clearly answer a basic question about the workflow for
developers-if they want code for an arbitrary new curve, what exactly do
they need to write down? Figure 1 includes some pretty complex code (in both
places), it seems the selling point here is that the developer only needs to
specify the curve equation (presumably in Weierstrass form) and prime, and
then the library does the rest? Perhaps a picture of the pipeline would help.

Similarly, I was not clear on the flexibility of this library. It seems to only
handle prime fields, which is reasonable since binary fields are no longer
advised, but that could be stated. What about prime-extension fields? Does
it support arbitrary Weierstrass form curves? I am quite sure it does not
provide support for pairings but that would be quite interesting future work.

one complaint would be that the work seems limited to elliptic curves and the
authors have essentially covered all widely used curves already. I think it
would be very interesting if the authors can speak to the generalizability
of the ideas/techniques to other crypto algorithms and implementations. Are
these concepts and tools and the whole approach repeatable in other contexts,
if not why, and if so, can you discuss what it would take to do so?
